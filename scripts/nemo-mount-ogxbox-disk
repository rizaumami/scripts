#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# This is nemo action Bash script to mount the original Xbox disk image.
#
# 1.  Put this script in your $PATH
# 2.  Create ~/.local/share/nemo/actions/mount_xbox_disk.nemo_action with these lines:
#
#     [Nemo Action]
#     Name=Mount OG Xbox Disk
#     Comment=Mount OG Xbox disk using fatxfs
#     Selection=s
#     Exec=/home/iza/.local/bin/nemo_mount_ogxbox_disk %F
#     Stock-Id=gtk-harddisk
#     Extensions=img;qcow2;
#     Dependencies=dd;fatxfs;od;yad;
#
#     Exec line must be in absolute path.
#
# Dependencies:
# fatx: (https://github.com/mborgerson/fatx).
#
# Sahri Riza Umami
#   v0.1 - 2024/01/04 09:57:51
#        - Initial release
#   v0.2 - 2024/01/07 10:09:03
#        - Better script
#
# LICENSE ----------------------------------------------------------------------
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
#
# ------------------------------------------------------------------------------

# Checking dependencies:
declare -a DEPS=(dd fatxfs od yad)
for ((NUM=${#DEPS[@]},i=0; i<NUM;i++)); do
  if command -v "${DEPS[i]}" &>/dev/null ; then
    unset -v 'DEPS[i]'
  fi
done

# Exit if dependency not found.
if [[ "${#DEPS[@]}" -gt 0 ]]; then
  echo    'Package(s) not found'
  echo    'Install the proper distribution package for your system:'
  printf  ' - %s\n' "${DEPS[@]}"
  zenity --warning --title='Missing dependency' --text="<b>$(printf ' - %s\n' "${DEPS[@]}")</b>"
  exit 1
fi

# VARIABLES --------------------------------------------------------------------

DIALOG=( "$(command -v yad)" --width=400 --mouse --add-preview )
DISK="$1"
[[ ${DISK##*.} == 'qcow2' ]] && ISQCOW=true || ISQCOW=false
MNT="${HOME}/XBMount/${1##*/} - "
PARTINFO='/tmp/ogxptbl'
REGUSR="${HOME##*/}"
declare -A XPART=( [E]="0" [C]="1" [X]="2" [Y]="3" [Z]="4" [F]="5" [G]="6" )

# FUNCTIONS --------------------------------------------------------------------
#
#print_usage() {
#  printf '%s\n' "
#  ${0##*/}
#
#  Usage:
#
#  OPTION
#
#  Example:
#    -
#"
#  exit
#}

# MAIN -------------------------------------------------------------------------

# Run script as root but preserve environment needed for regular user
# such mountpoint and opening filemanager as regular user.
if [[ "$EUID" -ne 0 ]]; then
  if $ISQCOW; then
    "${DIALOG[@]}" --title='Warning' --image=dialog-warning --window-icon=dialog-warning --text='<b>This will unmounting mounted partition of this disk.</b>'
  fi
  "${DIALOG[@]}" --entry --hide-text --no-buttons --title='Password' --window-icon=dialog-password --entry-label="<b>[sudo] password for $(whoami):</b>" | sudo -S -E "$0" "$@"
  exit
fi

if $ISQCOW; then
  while IFS=' ' read -r _ mnt _; do
    if [[ $mnt =~ ${DISK##*/} ]]; then
      sudo umount -l "${mnt//\\040/ }"
    fi
  done < /etc/mtab
  # This is dirty. I don't know how to mount multi partition of a qcow2.
  sudo modprobe nbd max_part=8 &>/dev/null
  sudo qemu-nbd --disconnect /dev/nbd0 &>/dev/null
  sudo qemu-nbd --connect=/dev/nbd0 "$DISK"
  DISK='/dev/nbd0'
fi

sudo dd if="$DISK" of="$PARTINFO" bs=512 count=1 status=none &>/dev/null

SECTOR=()
while IFS=' ' read -r _ active start size _; do
  # Get active partitions.
  if [[ $active == '80000000' ]]; then
    # MUltiply by 512.
    SECTOR+=("$((0x${start}*0x200)) $((0x${size}*0x200))")
  fi
done < <(od -t x4 "$PARTINFO")

if [[ ${#SECTOR[@]} -eq 0 ]]; then
  # $1 doesn't have partition table. Trying retail offset and size.
  SECTOR=(
    '0xabe80000 0x1312d6000'
    '0x8ca80000 0x1f400000'
    '0x80000 0x2ee00000'
    '0x2ee80000 0x2ee00000'
    '0x5dc80000 0x2ee00000'
  )
fi

# Retail disk partitions.
PARTS=( E C X Y Z 'UNMOUNT ALL' )

if [[ ${#SECTOR[@]} -eq 6 ]]; then
  PARTS=( E C X Y Z F 'UNMOUNT ALL' )
elif [[ ${#SECTOR[@]} -eq 7 ]]; then
  PARTS=( E C X Y Z F G 'UNMOUNT ALL' )
fi

# Do not offer mounted partition:
for ((NUM=${#PARTS[@]},i=0; i<NUM;i++)); do
  while IFS=' ' read -r _ mnt _; do
    if [[ $mnt == "${MNT// /\\040}${PARTS[i]}" ]]; then
      unset -v 'PARTS[i]'
      break
    fi
  done < /etc/mtab
done

unset IFS

# Form comma separated values string.
DRVS="$(printf ',%s' "${PARTS[@]}")"
DRVS="${DRVS:1}"

DRV=$("${DIALOG[@]}" --form --title='Xbox Drive Mount' --image=gtk-harddisk --window-icon=gtk-harddisk --separator='' --item-separator="," --field="<b>Partition (Drive Letter)</b>::"CB "${DRVS^^}")

if [[ $DRV == 'UNMOUNT ALL' ]]; then
  sudo umount -l "${MNT}"*
  exit
fi

MNT="${MNT}${DRV}"

# Mountpoint must empty to satisfy FUSE
if [[ -d "$MNT" ]]; then
  EMPTY=()
  for f in "$MNT"/*; do
    EMPTY+=( "$f" )
  done
  if [[ ${#EMPTY[@]} -gt 1 ]]; then
    "${DIALOG[@]}" --title='Error' --image=dialog-error --window-icon=dialog-error --text="${MNT}\n<b>fuse: mountpoint is not empty</b>"
    exit
  fi
else
  su "$REGUSR" -c "mkdir -p $(printf '%q' "$MNT")"
fi

DRV="${XPART[${DRV}]}"

# Try to run as regular user so they then can unmount it.
MNTCMD=( fatxfs -o allow_other "$DISK" $(printf '%q' "$MNT") --offset=$(printf '0x%x' "${SECTOR[$DRV]% *}") --size=$(printf '0x%x' "${SECTOR[$DRV]##* }") )
if $ISQCOW || su "$REGUSR" -c "${MNTCMD[*]}" ; then
  su "$USER" -c "${MNTCMD[*]}"
fi

su "$REGUSR" -c "nemo -t --existing-window $(printf '%q' "$MNT")"
