#!/usr/bin/env bash

# DESCRIPTION ------------------------------------------------------------------
#
# notes is a simple note taking script.
#
# The workflow is index based. So whatever you want to do with the note, better
# to get its index first.
#
# DEPENDENCY -------------------------------------------------------------------
#
# - nano
#
# CHANGELOG --------------------------------------------------------------------
#
# Sahri Riza Umami
# v0.1  - 2019/02/19 21:59:27
#         Initial script
# v0.2  - 2019/02/23 01:09:32
#         Only accept input number within array's items number
# v0.3  - 2020/01/03 13:53:14
#       - remove mdp as dependency
#       - rearrange functions
# v0.4  - 2020/12/26 23:37:27
#       - Major rewrite
#
# LICENSE ----------------------------------------------------------------------
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>
#
# ------------------------------------------------------------------------------

# VARIABLES --------------------------------------------------------------------

# Path to notes storage.
STORAGE="/mnt/data/Notes"
# Todays note
CURRENTNOTE="$STORAGE/$(printf '%(%Y/%m/%F)T')"

# FUNCTIONS --------------------------------------------------------------------

get_path() {
  if [[ $1 =~ ^[0-9]{8}$ ]]; then
    printf "%s" "$STORAGE/${1:0:4}/${1:4:2}/${1:0:4}-${1:4:2}-${1:6:2}"
  else
    printf "%s" "$STORAGE/${1:0:4}/${1:5:2}/$1"
  fi
}

not_exist() {
  print_w "Cannot access ${1##*/}: No such file or directory."
  print_w "Use ${0##*/} ls to list existing notes."
}

open_note() {
  if [[ -f "$2" ]]; then
    nano "$1" "$2"
  else
    not_exist "$2"
  fi
}

# Print message in brown.
print_w() {
  printf '\e[33m:: %s\n\e[m' "$@"
}

print_usage() {
  printf '%s\n' "
  ${0##*/} is a simple note taking script.

  Usage: ${0##*/} OPTION

  OPTION:
    -h  --help      Print this text
    -cp --copy      Copy a note to different filename
    -e  --edit      Edit a note
    -f  --find      Find string in notes filename
    -ls --list      Print notes in tree structure
    -mv --move      Move or rename a note to different filename
    -rn --rename    Move or rename a note to different filename
    -n  --new       Create a new note or add into todays note if exist
    -rm --remove    Remove or delete a note
    -s  --search    Search string in notes. Case insensitive
    -v  --view      View a note
    --version       Print script's version
    -m  --migrate   Migrate v0.1 - v0.3 note structure

  * To copy, edit, move or delete a note, we need to get its filename/date first.
  * Use ls to get note's filename
  * Note's date can be written in form of YYYY-MM-DD or YYYYMMDD.
  * E.g. 2020-11-12 or 20201112.

  Example:
    ${0##*/} -e 20201112               - edit note dated 12 November 2020
    ${0##*/} -f 2019                   - find '2019' string in note's filename
    ${0##*/} -ls 2019                  - list notes from year '2019'
    ${0##*/} -mv 20200511 /tmp/useless - move note dated 11 May 2020 to '/tmp/useless'
    ${0##*/} -rm 2020-11-12            - edit note dated 12 November 2020
    ${0##*/} -s duit                   - search for 'duit' string in notes
"
  exit
}

# MAIN -------------------------------------------------------------------------

if [[ -z $(command -v "nano") ]]; then
  print_w "nano not found."
  print_w "Install the proper nano distribution package for your system."
  exit
fi

# Check if notes storage is exists.
[[ -d $STORAGE ]] || mkdir -p "$STORAGE"
# Move to notes storage. Exit if the path doesn't exists.
cd "$STORAGE" || exit 1

[[ $# -eq 0 || $# -gt 3 ]] && print_usage

if [[ "$#" -eq 1 ]]; then
  case $1 in
    -cp|--copy|-mv|--move|-rn|--rename)
      print_w "$1 need a SOURCE and a TARGET filename."
      print_w "Example: $1 20201112 /tmp/useless"
    ;;
    -e|--edit)
      if [[ -f "$CURRENTNOTE" ]]; then
        open_note '-S' "$CURRENTNOTE"
      else
        not_exist "$CURRENTNOTE"
      fi
    ;;
    -ls|--list)
      tree "$STORAGE"
    ;;
    -m|--migrate)
      print_w "Migrating old notes..."
      while read -r OLDNOTE; do
        mkdir -p "${OLDNOTE:2:4}/${OLDNOTE:7:2}"
        mv -v "${OLDNOTE}" "${OLDNOTE:2:4}/${OLDNOTE:7:2}"
      done < <(find . -maxdepth 1 -type f)
      print_w "Done."
    ;;
    -n|--new)
      mkdir -p "$STORAGE/$(date '+%Y/%m')"
      # Note is differentiated by creation date. We will write to the same file
      # if taking a note on a same day.
      # Append a timestamp everytime we taking a note.
      printf '\n%s\n' "## $(printf '%(%R:%S)T\n' '-1')" >> "$CURRENTNOTE"
      open_note "-Dl" "$CURRENTNOTE"
    ;;
    -rm|--remove)
      print_w "$1: missing file operand"
      print_w "Try: ${0##*/} $1 NOTE_TO_BE_REMOVED"
    ;;
    -v|--view)
      if [[ -f "$CURRENTNOTE" ]]; then
        open_note '-Sv' "$CURRENTNOTE"
      else
        not_exist "$CURRENTNOTE"
      fi
    ;;
    --version)
      print_w "${0##*/} v0.4 - 2020/12/26 23:37:27"
    ;;
    [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])
      # Using note's filename (eg. 2020-11-12) to view the note
      open_note '-Sv' "$(get_path "$1")"
    ;;
    [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])
      # Using shorter date's note (eg. 20201112) to view the note
      open_note '-Sv' "$(get_path "$1")"
    ;;
    *)
      print_usage
    ;;
  esac
fi

if [[ $# -eq 2 || $# -eq 3 ]]; then
  case $1 in
    -cp|--copy)
      NOTETOCOPY="$(get_path "$2")"

      if [[ -f "$NOTETOCOPY" ]]; then
        cp -v "$NOTETOCOPY" "$3"
      else
        not_exist "$2"
      fi
    ;;
    -e|--edit)
      if [[ $2 =~ ^[0-9]{8}$ ]]; then
        open_note "-Dl" "$(get_path "$2")"
      else
        open_note "-Dl" "$(get_path "$2")"
      fi
    ;;
    -f|--find)
      mapfile -t SEARCHRESULT < <(find . -type f  -name "*$2*" | sort \
        | awk -F[/] '{print $4}')

      print_w 'Search title result:'
      for i in "${!SEARCHRESULT[@]}"; do
        printf '   %s\n' "$((i+1)). ${SEARCHRESULT[$i]}"
      done
    ;;
    -ls|--list)
      if [[ ${#2} -eq 4 ]]; then
        VAULT="$STORAGE/$2"
      elif [[ ${#2} -eq 6 ]]; then
        VAULT="$STORAGE/${2:0:4}/${2:4:2}"
      fi

      if [[ -d "$VAULT" ]]; then
        tree "$VAULT"
      else
        not_exist "$VAULT"
      fi
    ;;
    -mv|--move|-rn|--rename)
      NOTETOMOVE="$(get_path "$2")"

      if [[ -f "$NOTETOMOVE" ]]; then
        mv -v "$NOTETOMOVE" "$3"
      else
        not_exist "$2"
      fi
    ;;
    -rm|--remove)
      NOTETOREM="$(get_path "$2")"

      if [[ -f "$NOTETOREM" ]]; then
        print_w "Are you sure want to delete $NOTETOREM? (yY[nN])"
        read -rp ' ' confirmdelete

        case "$confirmdelete" in
          y|Y)
            rm "$NOTETOREM" || exit
            print_w "$NOTETOREM has been deleted."
          ;;
        esac
      else
        not_exist "$2"
      fi
    ;;
    -s|--search)
      print_w 'Search result:'
      grep -rin --color "$2" -- *
    ;;
    -v|--view)
      open_note '-Sv' "$(get_path "$2")"
    ;;
    *)
      print_usage
    ;;
  esac
fi
